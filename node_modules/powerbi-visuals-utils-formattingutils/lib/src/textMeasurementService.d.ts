import { TextProperties } from "./interfaces";
/**
 * Removes spanElement from DOM.
 */
export declare function removeSpanElement(): void;
/**
 * Measures the width of the text with the given SVG text properties.
 * @param textProperties The text properties to use for text measurement.
 * @param text The text to measure.
 */
export declare function measureSvgTextWidth(textProperties: TextProperties, text?: string): number;
/**
 * Return the rect with the given SVG text properties.
 * @param textProperties The text properties to use for text measurement.
 * @param text The text to measure.
 */
export declare function measureSvgTextRect(textProperties: TextProperties, text?: string): SVGRect;
/**
 * Measures the height of the text with the given SVG text properties.
 * @param textProperties The text properties to use for text measurement.
 * @param text The text to measure.
 */
export declare function measureSvgTextHeight(textProperties: TextProperties, text?: string): number;
/**
 * Returns the text Rect with the given SVG text properties.
 * @param {TextProperties} textProperties - The text properties to use for text measurement
 */
export declare function estimateSvgTextBaselineDelta(textProperties: TextProperties): number;
/**
 * Estimates the height of the text with the given SVG text properties.
 * @param {TextProperties} textProperties - The text properties to use for text measurement
 */
export declare function estimateSvgTextHeight(textProperties: TextProperties, tightFightForNumeric?: boolean): number;
/**
 * Measures the width of the svgElement.
 * @param svgElement The SVGTextElement to be measured.
 */
export declare function measureSvgTextElementWidth(svgElement: Element): number;
/**
 * Fetches the text measurement properties of the given DOM element.
 * @param element The selector for the DOM Element.
 */
export declare function getMeasurementProperties(element: Element): TextProperties;
/**
 * Fetches the text measurement properties of the given SVG text element.
 * @param element The SVGTextElement to be measured.
 */
export declare function getSvgMeasurementProperties(element: Element): TextProperties;
/**
 * Returns the width of a div element.
 * @param element The div element.
 */
export declare function getDivElementWidth(element: Element): string;
/**
 * Compares labels text size to the available size and renders ellipses when the available size is smaller.
 * @param textProperties The text properties (including text content) to use for text measurement.
 * @param maxWidth The maximum width available for rendering the text.
 */
export declare function getTailoredTextOrDefault(textProperties: TextProperties, maxWidth: number): string;
/**
 * Compares labels text size to the available size and renders ellipses when the available size is smaller.
 * @param textElement The SVGTextElement containing the text to render.
 * @param maxWidth The maximum width available for rendering the text.
 */
export declare function svgEllipsis(textElement: Element, maxWidth: number): void;
/**
 * Word break textContent of <text> SVG element into <tspan>s
 * Each tspan will be the height of a single line of text
 * @param textElement - the SVGTextElement containing the text to wrap
 * @param maxWidth - the maximum width available
 * @param maxHeight - the maximum height available (defaults to single line)
 * @param linePadding - (optional) padding to add to line height
 */
export declare function wordBreak(textElement: Element, maxWidth: number, maxHeight: number, linePadding?: number): void;
/**
 * Word break textContent of span element into <span>s
 * Each span will be the height of a single line of text
 * @param textElement - the element containing the text to wrap
 * @param maxWidth - the maximum width available
 * @param maxHeight - the maximum height available (defaults to single line)
 * @param linePadding - (optional) padding to add to line height
 */
export declare function wordBreakOverflowingText(textElement: SVGTextElement, maxWidth: number, maxHeight: number, linePadding?: number): void;
