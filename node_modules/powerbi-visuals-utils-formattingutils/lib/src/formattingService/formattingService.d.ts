import * as dateTimeFormat from "./dateTimeFormat";
import * as numberFormat from "./numberFormat";
import * as formattingEncoder from "./formattingEncoder";
import { IFormattingService, DateTimeUnit } from "./iFormattingService";
export interface Culture {
    name: string;
    calendar: Calendar;
    calendars: CalendarDictionary;
    numberFormat: NumberFormatInfo;
}
export interface Calendar {
    patterns: any;
    firstDay: number;
}
export interface CalendarDictionary {
    [key: string]: Calendar;
}
export interface NumberFormatInfo {
    decimals: number;
    groupSizes: number[];
    negativeInfinity: string;
    positiveInfinity: string;
}
export declare class FormattingService implements IFormattingService {
    private _currentCultureSelector;
    private _currentCulture;
    private _dateTimeScaleFormatInfo;
    formatValue(value: any, formatValue?: string, cultureSelector?: string): string;
    format(formatWithIndexedTokens: string, args: any[], culture?: string): string;
    isStandardNumberFormat(format: string): boolean;
    formatNumberWithCustomOverride(value: number, format: string, nonScientificOverrideFormat: string, culture?: string): string;
    dateFormatString(unit: DateTimeUnit): string;
    /**
     * Sets the current localization culture
     * @param cultureSelector - name of a culture: "en", "en-UK", "fr-FR" etc. (See National Language Support (NLS) for full lists. Use "default" for invariant culture).
     */
    private setCurrentCulture;
    /**
     * Gets the culture assotiated with the specified cultureSelector ("en", "en-US", "fr-FR" etc).
     * @param cultureSelector - name of a culture: "en", "en-UK", "fr-FR" etc. (See National Language Support (NLS) for full lists. Use "default" for invariant culture).
     * Exposing this function for testability of unsupported cultures
     */
    getCulture(cultureSelector?: string): Culture;
    private initialize;
    /**
     *  Exposing this function for testability
     */
    getCurrentCulture(): string;
    /**
     *  Exposing this function for testability
     *  @param name: queryString name
     */
    getUrlParam(name: string): string;
}
declare const formattingService: IFormattingService;
export { formattingService, numberFormat, dateTimeFormat, formattingEncoder };
