import { Severity } from "./features/FeatureTypes.js";
import * as features from "./features/index.js";
export var Status;
(function (Status) {
    Status[Status["Success"] = 0] = "Success";
    Status[Status["Error"] = 1] = "Error";
})(Status || (Status = {}));
export class FeatureManager {
    features = Object.keys(features).map(key => features[key]);
    validate(stage, sourceInstance) {
        const result = {
            status: Status.Success,
            logs: {
                errors: [],
                warnings: [],
                info: [],
                deprecation: []
            }
        };
        this.features
            .filter(feature => feature.stage == stage)
            .filter(feature => feature.visualFeatureType & sourceInstance.visualFeatureType)
            .filter(feature => !feature.isSupported(sourceInstance))
            .forEach(({ errorMessage, severity }) => {
            switch (severity) {
                case Severity.Error:
                    result.status = Status.Error;
                    result.logs.errors.push(errorMessage);
                    break;
                case Severity.Warning:
                    result.logs.warnings.push(errorMessage);
                    break;
                case Severity.Info:
                    result.logs.info.push(errorMessage);
                    break;
                case Severity.Deprecation:
                    result.logs.deprecation.push(errorMessage);
                    break;
            }
        });
        return result;
    }
}
