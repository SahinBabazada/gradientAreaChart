import { createCertificate } from './CertificateTools.js';
import ConsoleWriter from './ConsoleWriter.js';
import VisualManager from './VisualManager.js';
export default class CommandManager {
    static async start(options, rootPath) {
        const webpackOptions = {
            devMode: true,
            devtool: "source-map",
            generateResources: true,
            generatePbiviz: false,
            minifyJS: false,
            minify: false,
            devServerPort: options.port,
            stats: options.stats,
            skipApiCheck: options.skipApi,
            allLocales: options.allLocales,
            pbivizFile: options.pbivizFile,
        };
        const visualManager = new VisualManager(rootPath);
        await visualManager
            .prepareVisual(options.pbivizFile)
            .validateVisual()
            .initializeWebpack(webpackOptions);
        visualManager.startWebpackServer(options.drop);
    }
    static async lint(options, rootPath) {
        const visualManager = new VisualManager(rootPath);
        await visualManager
            .prepareVisual()
            .runLintValidation(options);
    }
    static async package(options, rootPath) {
        if (!options.pbiviz && !options.resources) {
            ConsoleWriter.error('Nothing to build. Cannot use --no-pbiviz without --resources');
            process.exit(1);
        }
        const webpackOptions = {
            devMode: false,
            generateResources: options.resources,
            generatePbiviz: options.pbiviz,
            minifyJS: options.minify,
            minify: options.minify,
            compression: options.compression,
            stats: options.stats,
            skipApiCheck: options.skipApi,
            allLocales: options.allLocales,
            pbivizFile: options.pbivizFile,
        };
        const lintOptions = {
            verbose: options.verbose,
            fix: options.fix,
            useDefault: options.useDefault
        };
        const visual = new VisualManager(rootPath).prepareVisual(options.pbivizFile);
        await visual.runLintValidation(lintOptions);
        visual.validateVisual(options.verbose)
            .initializeWebpack(webpackOptions)
            .then(visualManager => visualManager.generatePackage(options.verbose));
    }
    static new({ force, template }, name, rootPath) {
        const generateOptions = {
            force: force,
            template: template
        };
        VisualManager.createVisual(rootPath, name, generateOptions);
    }
    static info(rootPath) {
        new VisualManager(rootPath)
            .prepareVisual()
            .displayInfo();
    }
    static async installCert() {
        await createCertificate();
    }
}
